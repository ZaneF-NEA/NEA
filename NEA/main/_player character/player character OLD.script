-- constants for player character (PC). These are placed here so I can easily tweak them later. They are constants so they are consistent.
local MAX_SPEED = 500 -- maximum speed when moving left or right.
local GRAVITY = -3250 -- gravity controls downward speed when in air.
local JUMP_SPEED = 1200 -- the speed at which the PC jumps.

function init(self) -- inital state of PC
	--msg.post(".", "acquire_input_focus") -- get input to go to this model
	--msg.post("camera", "acquire_camera_focus") -- get camera to follow player character
	self.velocity = vmath.vector3(0, 0, 0) -- initial direction and speed, should be 0 at start (before input)
	self.correction = vmath.vector3() -- to ensure no overlap
	self.ground_contact = false -- to ensure it can make contact with the ground
	self.anim = nil -- no current animation when still - default to animation stored in collection (standing animation)
end

function update(self, dt)
	self.velocity.y = self.velocity.y + GRAVITY * dt -- GRAVITY

	local pos = go.get_position() -- movement
	pos = pos + self.velocity * dt
	go.set_position(pos)
	update_animations(self) -- animation update
	
	self.correction = vmath.vector3() -- reset state
	self.ground_contact = false
	self.wall_contact = false
end

local function update_animations(self)
	-- make sure the player character faces the right way
	sprite.set_hflip("#sprite", self.velocity.x < 0)
	-- make sure the right animation is playing
	if self.ground_contact then
		if self.velocity.x == 0 then -- ground
			play_animation(self, hash("stand"))
		else
			play_animation(self, hash("walk"))
		end
	else -- going to air
		play_animation(self, hash("jump"))
	end
end

function update(self, dt)
	self.velocity.y = self.velocity.y + GRAVITY * dt

	-- move player
	local pos = go.get_position()
	pos = pos + self.velocity * dt
	go.set_position(pos)

	-- update animations based on state (ground, air, move and idle)
	update_animations(self)

	-- reset volatile state
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.wall_contact = false
end

local function move(self, direction) -- for movement
	-- direction for right is 1 and left is -1 - this comment is repeated in on_input to ensure everything is consistent.
	self.velocity.x = max_speed * direction
end

local function jump(self)
	self.velocity.y = JUMP_SPEED -- set speed to jump speed
	play_animation(self, hash("jump")) -- change animation for jump feedback
	self.ground_contact = false
	if action.released then 
		drop(self) -- when the user releases the jump button prematurely the PC should still drop
	end
end

local function drop(self)
	-- cut the jump short if we are still going up
	if self.velocity.y > 0 then
		-- scale down the upwards speed
		self.velocity.y = self.velocity.y * 0.5
	end
end

function on_input(self, action_id, action)
	-- direction for right is 1 and left is -1
	if action_id == hash("left") then -- left
		move(self, -1)
	elseif action_id == hash("right") then --right
		move(self, 1)
	elseif action_id == hash("jump") and self.ground_contact == true then -- only able to jump if PC is on the floor
		jump(self)
	end
end

function on_message(self, message_id, message, sender)
	-- check if we received a contact point message
	if message_id == msg_contact_point_response then
		-- check that the object is something we consider an obstacle
		if message.group == group_obstacle then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
end

local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			-- Only care for projections that does not overshoot.
			local comp = (distance - distance * proj) * normal
			-- Apply compensation
			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
		end
	end

	-- collided with a wall
	-- stop horizontal movement
	if math.abs(normal.x) > 0.7 then
		self.wall_contact = true
		self.velocity.x = 0
	end
	-- collided with the ground
	-- stop vertical movement
	if normal.y > 0.7 then
		self.ground_contact = true
		self.velocity.y = 0
	end
	-- collided with the ceiling
	-- stop vertical movement
	if normal.y < -0.7 then
		self.velocity.y = 0
	end
end

function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the sprite to play the animation
		sprite.play_flipbook("#sprite", anim)
		-- remember which animation is playing
		self.anim = anim
	end
end

function update_animations(self)
	-- make sure the player character faces the right way
	sprite.set_hflip("#sprite", self.velocity.x < 0)
	-- make sure the right animation is playing
	if self.ground_contact then
		if self.velocity.x == 0 then
			play_animation(self, anim_idle)
		else
			play_animation(self, anim_walk)
		end
	else
		if self.velocity.y > 0 then
			play_animation(self, anim_jump)
		else
			play_animation(self, anim_fall)
		end
	end
end

function on_message(self, message_id, message, sender) -- https://forum.defold.com/t/player-kinematic-falling-trough-the-floor-static-solved/64163
	if message_id == hash("contact_point_response") then
		local pos = go.get_position()
		pos = pos + message.normal * message.distance
		go.set_position(pos)
	end
end

--function on_message(self, message_id, message, sender)
	-- check if we received a contact point message
	--if message_id == msg_contact_point_response then
		-- check that the object is something we consider an obstacle
		--if message.group == group_obstacle then
			--handle_obstacle_contact(self, message.normal, message.distance)
		--end
	--end
--end